Raspberrry Pi 4B running GenPi64

Background:
John successfully built a Gentoo image for the Pi using the GenPi64 project - Jenkins2 branch.  It took 8 day and 8 nights and completed on 3/21/22.

He used a VM, gentoo2 (machine named "jenk" [for Jenkins branch of GenPi64]), on his Gentoo hypervisor which sits on the following hardware purchased 10/30/2013: 
    AMD Bulldozer  (FX-8120 Zambezi 3.1GHz Socket AM3+ 125W Eight) processor and 32 GB Ram ($139.99)
    Motherboard GIGABYTE GA-990FXA-UD3 AM3+ AMD 990FX SATA 6Gb/s U ($139.99)
    32 GB Cosair Vengenace (4 x 8GB) 240 Pin DDR3 SDRA ($379.99)
    


1st two entries from "git log"

    commit 091cb27cf737ed9cf3dfa16debe4515033962f9c (HEAD -> jenkins2, origin/jenkins2)
    Merge: 2967dc4 cdc085e
    Author: John Poole <jlpoole56@gmail.com>
    Date:   Sun Mar 13 19:36:38 2022 -0700

        Merge pull request #1 from perkinslr/patch-1

        Add `-B` flag for *each* pychroot bind mount.
    commit 2967dc4e0677e6257e27574de6c1a0b6d85cb793
    Author: Michael Jones <jonesmz@jonesmz.com>
    Date:   Mon Feb 21 10:46:59 2022 -0600

        Preserve user environment in sudo

The kernel used to compile was:

    jlpoole@jenk ~ $ uname -a
    Linux jenk 5.15.11-gentoo-x86_64 #1 SMP Sun Jan 16 09:24:16 -00 2022 x86_64 AMD FX(tm)-8120 Eight-Core Processor AuthenticAMD GNU/Linux
    jlpoole@jenk ~ $

John uses a common boot directory for the Gentoo VMs, including Dom 0.  The project required two modules to be manually loaded as they were not specified as defaults in  the kernel.  The were loop and btrfs.
John had to copy the kernel modules to the guest VM

    [in Dom0 "hermes"]
    mount /dev/mapper/vg0-gentoo2 /mnt/gentoo2
     
    hermes /usr/src/linux # cp -R /lib/modules/5.15.11-gentoo-x86_64/ /mnt/gentoo2/lib/modules/5.15.11-gentoo-x86_64
    hermes /usr/src/linux #

After the image was built, John then performed an eix-sync and then an "emerge --update --newuse --deep @world" and there was a tremendous number of packages that needed to be updated, inclindg gcc and lvm.  John placed the SDNC on a Raspberry Pi4B in order to leverage the more powerful processor since the Pi Zero 2 W is less powerful and and less RAM.  John recalls it was at least 8 hours.  Therefore, on a new build, we should update the image to be built, if only to avoid the gcc & lvm builds which take a very long time.

Then on 3/27/22, John utilised the VM gentoo1 (same kernel as gentoo2 "jenk") where he had installed crossdev to cross compile programs, e.g. gstreamer, for the Raspberry Pi Zero 2 W.

He built two cross compilers as specific settings for the cross compiler were not stated anywhere.

    1) crossdev  -t aarch64-unknown-linux-gnu --ov-output /var/db/repos/crossdev  & 
    2) crossdev  -t aarch64-gentoo-linux-gnu --ov-output /var/db/repos/crossdev

He then created two test programs: arm64-test.c and rm64_test2.c

    jlpoole@gentooVM1 ~ $ cat arm64-test.c
    int main(){return 0;}
    jlpoole@gentooVM1 ~ $ cat arm64_test2.c
    #include <stdio.h>
    int main() {
       // printf() displays the string inside quotation
       printf("Hello, World!");
       return 0;
    }
    jlpoole@gentooVM1 ~ $
 
and then used both cross-compilers to build executables:
 
    -rwxr-xr-x  1 root    root        8984 Mar 26 20:00 arm64_test2_A
    -rwxr-xr-x  1 root    root        8984 Mar 26 20:00 arm64_test2_B
    -rwxr-xr-x  1 root    root        8912 Mar 26 19:57 arm64_test_A
    -rwxr-xr-x  1 root    root        8912 Mar 26 20:01 arm64_test_B

He then copied the four executable over to the Rasp4B2 where they failed:

    jlpoole@GenPi64 ~ $ $ ./arm64_test_A
    ./arm64_test_A: /lib64/libc.so.6: version `GLIBC_2.34' not found (required by ./arm64_test_A)
    jlpoole@GenPi64 ~ $ ./arm64_test_B
    ./arm64_test_B: /lib64/libc.so.6: version `GLIBC_2.34' not found (required by ./arm64_test_B)
    jlpoole@GenPi64 ~ $  ./arm64_test2_A
    ./arm64_test2_A: /lib64/libc.so.6: version `GLIBC_2.34' not found (required by ./arm64_test2_A)
    jlpoole@GenPi64 ~ $ ./arm64_test2_B
    ./arm64_test2_B: /lib64/libc.so.6: version `GLIBC_2.34' not found (required by ./arm64_test2_B)
    jlpoole@GenPi64 ~

(3/27/22) John then consulted with Mike Jones on Discord where Mike advised:

    Your simple test case broke because you built it on the remote system using the remote systems headers
    If you had built a gentoo binpkg and then tried to copy it to your raspberry pi and install the binpkg with emerge
    Emerge wouldn't have let you, because the binpkg wouldn't have its dependencies satisfied
    Using Jenkins to build binpkgs every day is very unlikely to break anyone's system. Emerge will prevent installation if something doesn't match


Logan Perkins advised 4/6/22 "No need to build the kernel, but libc and gcc version need to be perfect matches, and binutils needs to be at least the same major/minor version."

So, below John attempted to learn what people have been using so John could match.

Question:
    jlpoole
     — 
    03/27/2022

        Hi Logan:  when you read this, if you can specify a crossdev command you're using, e.g. like "crossdev --binutils '~2.37' --gcc '~11.2.1' --kernel '~5.15' --libc '~2.33' -t aarch64-unknown-linux-gnu --ov-output /var/db/repos/crossdev", I shall build it and/or configure my system so it can be built.

Response:

     lperkins2
     — 
    04/04/2022
    I use crossdev inside a gentoo prefix install, as crossdev can mess up your system if you don't do it right.  Gentoo prefix is not prefectly stable, so were I to do it again, I'd probably just do a fresh chroot.  Regardless, I believe the command I ran inside the prefix was crossdev --stable -t aarch64-unknown-linux-gnu Not 100% that is the correct tuple, as I also have reference to cross-aarch64-unknown-linux-gnu in my history.
    I think that is the correct one though.
    Then you start distccd like normal, with the resulting cross compiler in your path.

The above lead to the specifications set forth below on 7:29 PM 4/7/2022 

Here are the values from John's 8 day build of Genpi64:
    1) binutils
    2) gcc
    3) kernel
    4) libc

1) binutils

value for cross compiler: 2.37

    [I] sys-libs/binutils-libs
         Available versions:  2.34-r2(0/2.34) 2.35.2(0/2.35.2) 2.36.1-r2(0/2.36.1) 2.37_p1-r2(0/2.37){xpak} ~2.38-r1(0/2.38) {64-bit-bfd cet multitarget nls static-libs ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32"}
         Installed versions:  2.37_p1-r2(0/2.37){xpak}(06:59:20 AM 03/10/2022)(nls -64-bit-bfd -cet -multitarget -static-libs ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="-32 -64 -x32")
         Homepage:            https://sourceware.org/binutils/
         Description:         Core binutils libraries (libbfd, libopcodes, libiberty) for external packages

    Found 3 matches
    jlpoole@GenPi64 ~ $ eselect bintuils
    !!! Error: Can't load module bintuils
    exiting
    jlpoole@GenPi64 ~ $ eselect binutils list
     [1] aarch64-unknown-linux-gnu-2.37_p1 *
    jlpoole@GenPi64 ~ $

2)  GCC

value for cross compiler: 11.2.1

    jlpoole@GenPi64 ~ $ date;hostname;uname -a; gcc --version
    Fri Apr  8 02:23:50 AM UTC 2022
    GenPi64
    Linux GenPi64 5.10.92-v8-p4 #1 SMP PREEMPT Thu Mar 10 12:18:30 UTC 2022 aarch64 GNU/Linux
    gcc (Gentoo 11.2.1_p20220115 p4) 11.2.1 20220115
    Copyright (C) 2021 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.  There is NO
    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    jlpoole@GenPi64 ~ $

3) Kernel

value for cross compiler: 5.10.92

    jlpoole@GenPi64 ~ $ date;hostname;uname -a
    Fri Apr  8 02:31:22 AM UTC 2022
    GenPi64
    Linux GenPi64 5.10.92-v8-p4 #1 SMP PREEMPT Thu Mar 10 12:18:30 UTC 2022 aarch64 GNU/Linux
    jlpoole@GenPi64 ~ $
    
4) libc

value for cross compiler: 2.33

    jlpoole@GenPi64 ~ $ date; eix -I libc
    Fri Apr  8 02:32:33 AM UTC 2022
    [I] sys-libs/glibc
         Available versions:  (2.2) [M]~*2.19-r2^s [M]2.30-r9^t [M]2.31-r7^t [M]2.32-r8^t 2.33-r7^t 2.33-r13^t{xpak} ~2.34-r9^t ~2.34-r10^t **2.35^t **9999*l^t
           {audit caps cet +clone3 compile-locales +crypt custom-cflags debug doc gd headers-only +multiarch multilib multilib-bootstrap nscd profile selinux +ssp +static-libs static-pie suid systemd systemtap test vanilla}
         Installed versions:  2.33-r13(2.2)^t{xpak}(06:08:15 AM 03/10/2022)(multiarch ssp static-libs -audit -caps -cet -compile-locales -crypt -custom-cflags -doc -gd -headers-only -multilib -multilib-bootstrap -nscd -profile -selinux -static-pie -suid -systemd -systemtap -test -vanilla)
         Homepage:            https://www.gnu.org/software/libc/
         Description:         GNU libc C library

    [I] sys-libs/libcap
         Available versions:  2.62 2.63{xpak} **9999*l {pam split-usr static-libs tools ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32"}
         Installed versions:  2.63{xpak}(05:40:26 AM 03/24/2022)(pam split-usr -static-libs -tools ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="-32 -64 -x32")
         Homepage:            https://sites.google.com/site/fullycapable/
         Description:         POSIX 1003.1e capabilities

    [I] virtual/libc
         Available versions:  1-r1
         Installed versions:  1-r1(11:26:55 PM 01/24/2022)
         Description:         Virtual for the C library

    [I] virtual/libcrypt
         Available versions:  [M]1-r1(0/1) 2(0/2) {static-libs ABI_MIPS="n32 n64 o32" ABI_S390="32 64" ABI_X86="32 64 x32"}
         Installed versions:  2(0/2)(09:03:29 PM 11/02/2021)(static-libs ABI_MIPS="-n32 -n64 -o32" ABI_S390="-32 -64" ABI_X86="-32 -64 -x32")
         Description:         Virtual for libcrypt.so

    Found 4 matches
    jlpoole@GenPi64 ~ $

The next step is to build a cross compiler that matches the A) gcc and B) libc "perfectly".

References:  
    https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Creating_a_cross-compiler
    
Specifically: https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Creating_a_cross-compiler#crossdev

Example from above:

    crossdev --g [gcc version] --l [(g)libc version] --b [binutils version] --k [kernel headers version] -P -v -t [tuple]
    
Plan: I'll try first being as specific as possible and then back out if I meet failures/incompatabilities.
My command:

    crossdev --g 11.2.1 --l 2.33 --b 2.37 --k 5.10.92 -P -v -t cross-aarch64-unknown-linux-gnu
    
Time to build:  1 hour 33 minutes

    gentooVM1 /home/jlpoole # head crossdev_Apr_7_2022_2058.script
Script started on 2022-04-07 20:59:39-07:00 [TERM="xterm" TTY="/dev/pts/1" COLUMNS="80" LINES="40"]

    gentooVM1 /home/jlpoole # tail -n 10 crossdev_Apr_7_2022_2058.script
    >>> No outdated packages were found on your system.

     * GNU info directory index is up-to-date.                                [ ok ]
    gentooVM1 /home/jlpoole # date
    Thu Apr  7 22:32:52 PDT 2022
    gentooVM1 /home/jlpoole # exit
    exit

    Script done on 2022-04-08 04:29:57-07:00 [COMMAND_EXIT_CODE="0"]
    gentooVM1 /home/jlpoole #

Script log size:
    31M Apr  8 04:29 crossdev_Apr_7_2022_2058.script
    file: 123,783 lines.
    
cross compiler log:
    874K Apr  7 21:09 /var/log/portage/cross-aarch64-unknown-linux-gnu-binutils.log
    file: 5,680 lines

had to review end of log file to determine what the name of the new cross compiler is.

Confirmation of build:
    gentooVM1 /home/jlpoole # /usr/bin/aarch64-unknown-linux-gnu-gcc-11.2.1 --version
    aarch64-unknown-linux-gnu-gcc-11.2.1 (Gentoo 11.2.1_pre9999 p3, commit faba16dd683750fc82c49fdd4c0bbbf725a2ea48) 11.2.1 20220408
    Copyright (C) 2021 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.  There is NO
    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    gentooVM1 /home/jlpoole 

Test:

     /usr/bin/aarch64-unknown-linux-gnu-gcc-11.2.1 -Wall arm64-test.c -o arm64_test_C
     /usr/bin/aarch64-unknown-linux-gnu-gcc-11.2.1 -Wall arm64_test2.c -o arm64_test2_C

Copy over the GenPi64

    gentooVM1 /home/jlpoole # scp arm*_C jlpoole@192.168.1.97:/home/jlpoole
    (jlpoole@192.168.1.97) Password:
    arm64_test2_C                                 100% 9256     4.4MB/s   00:00
    arm64_test_C                                  100% 9184     5.9MB/s   00:00
    gentooVM1 /home/jlpoole #

Testing on GenPi64:

    jlpoole@GenPi64 ~ $ ./arm64_test_C
    jlpoole@GenPi64 ~ $ ./arm64_test2_C
    Hello, World!jlpoole@GenPi64 ~ $

Result:  success (always remember to include "\n" for Hello World!)

4:57 AM 4/8/2022
Next steps: install distcc on both machines and perform some distcc compiling tests