#! /usr/bin/python3.9

import subprocess
import sys
import time
import os
import lockfile
import json

if len(sys.argv) > 2:
  print("Using sub-completed file")
  completed_name = "completed-"+sys.argv[2]
  snapshot_name = sys.argv[2]+"-"
else:
  completed_name = "completed"
  snapshot_name = ""

sys.path.insert(0, os.environ['CONFIG_DIR'])

import config
config = getattr(config, os.environ['PROJECT'])

def writecompleted(JobName):
  try:
    lock=lockfile.LockFile(os.path.join(PROJECT_DIR, completed_name))
    while not lock.is_locked():
      try:
        lock.acquire()
      except AlreadyLocked:
        pass
      except LockFailed:
        print( "ABORT: FILE LOCKING NOT SUPPORTED.")
        exit(1)
      time.sleep(1)
    f=open(os.path.join(PROJECT_DIR,completed_name),"a")
    f.write(JobName)
    f.write("\n")
    f.close()
  finally:
    lock.release()

def takeSnapshot(step):
  if step is None:
    return
  step = snapshot_name + step
  print("Taking snapshot:", step)
  cwd = os.getcwd()
  try:
    
    os.chdir(PROJECT_DIR)
    os.chdir('..')
    if os.path.exists(os.path.join(os.environ["BTRFS_SNAPSHOTS"], step)):
      return
    p = subprocess.Popen(["/sbin/btrfs", "subvolume", "snapshot", PROJECT_DIR, os.path.join(os.environ["BTRFS_SNAPSHOTS"], step)])
    p.wait()
    p.poll() and sys.exit(p.poll())
  finally:
    os.chdir(cwd)
    

PROJECT_DIR=os.environ['PROJECT_DIR']

NO_PARALLEL = os.environ.get("NO_PARALLEL", False)

BREAK_AT = os.environ.get("BREAK_AT", False)

MANIFEST=open(sys.argv[1],"r").readlines()
completed=["",]
print( "loading manifest")
with open(sys.argv[1], 'r') as f:
  manifest = json.load(f)

for idx, item in enumerate(manifest):
  if "--allprev--" in item['deps']:
    item['deps'].remove("--allprev--")
    for thing in manifest[:idx-2]:
      item['deps'].append(thing['name'])
  
print("load complete")

print("Loading status")
try:
  with open(os.path.join(os.environ['PROJECT_DIR'], completed_name),"r") as f:
    for entry in f.readlines():
      entry = entry.strip('\n')
      for m in manifest:
        if m['name'] == entry:
          if m['parser'] == 'includejson':
            break
          completed.append(entry)
          break
      else:
        print("Got completed entry name but no known step by that name, adding anyway")
        completed.append(entry)
  print(f"steps for {completed_name}", completed)
  dump=[]
  for item in manifest:
    if item['name'] in completed:
      dump.append(item)
  for item in dump:
    manifest.remove(item)
except:
  print("status not loadable")

print("load complete")
print(manifest)

def checkdeps(manifest):
  for item in manifest:
    print("checking ",item['name'])
    for dep in reversed(item['deps']):
      if dep in completed: item['deps'].remove(dep)


def execute(manifest):
  print("completed=",completed)
  print("manifest=",manifest)
  jobs=[]
  for item in manifest:
    print("checking ",item['name'],"deps",item['deps'])
    if not item['deps']:
      print("all deps satisfied for",item['name'])

      env={}

      def copyenv(vars):
        for var in vars:
          v = os.environ.get(var)
          if v is not None:
            env[var]=v
      
      copyenv( ('PROJECT','PARSERS','BINARY_ASSETS','SCRIPTS','CALLBACKS','BASEDIR','PROJECT_DIR','CHROOT_DIR', 'CONFIG_DIR', "DISTCC_HOSTS", "BREAK_AT", "NO_PARALLEL", "BTRFS_SNAPSHOTS") )
      env |= item.get('env', {})

      env['TERM'] = config.get('TERM', 'dumb')
      print("executing ",item['name'],"deps",item['deps'])
      args = item['args'][:]
      if item['parser'] == "includejson":
        args.append(item['name'])
      
      jobs.append( (subprocess.Popen([os.path.join(os.environ['PARSERS'],item['parser'],item['parser']), *args], env=env), item['name']) )
      manifest.remove(item)
      if NO_PARALLEL:
        return jobs
  return( jobs)

def checkjob(jobs):
  print("running jobs",jobs)
  onefinished=False
  name = None
  while not onefinished and jobs:
    for job in jobs:
      job[0].poll()
      if job[0].returncode != None:
        onefinished=True
        if job[0].returncode == 0:
          print( "jobdone",job[1])
          completed.append(job[1])
          writecompleted(job[1])
          jobs.remove(job)
          name = job[1]
        else:
          print("FATAL: JOBFAILED ",job[1])
          jobs.remove(job)
          while jobs:
            print("Waiting for jobs to complete...")
            checkjob(jobs)
            time.sleep(10)
          exit(1)
    time.sleep(1)
  if os.environ.get('BTRFS_SNAPSHOTS', False):
    takeSnapshot(name)

exitcode = 0
    
jobs=[]
emptyloops=0
while manifest:
  if BREAK_AT:
    stop_job = [i for i in manifest if i['name'] == BREAK_AT]
    if stop_job:
      stop_idx = manifest.index(stop_job[0])
      manifest = manifest[:stop_idx+1]
      exitcode = 1

  checkdeps(manifest)
  
  
  jobs1=jobs+execute(manifest)
  jobs=jobs1
  if len(jobs) == 0:
    emptyloops+=1
    print("No Jobs Running... ",emptyloops)
  else:
    emptyloops=0

  if emptyloops > 100:
    print("No jobs running.  Exiting.")
    exit(1)
  
  checkjob(jobs)

  time.sleep(1)
  

print ("waiting for jobs to complete")
while jobs:
  checkjob(jobs)
  time.sleep(1)
    
if exitcode:
  print("Exiting at breakpoint")
  exit(exitcode)
