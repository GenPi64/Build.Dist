#!/usr/bin/python3.9
import os
import sys
import json
import subprocess

def system(cmd):
    print(cmd)
    return os.system(cmd) and sys.exit(1)

os.chdir(os.environ['PROJECT_DIR'])
sys.path.insert(0, os.environ['CONFIG_DIR'])

import config
config = getattr(config, os.environ['PROJECT'])

image = config['image']

system(f"rm -f {image['name']}")

system(f"truncate -s {image['size']} {image['name']}")

system(f"parted --script {image['name']} mklabel {image['format']}")

if image['format'] == 'msdos':
    prted = '/sbin/fdisk'
    p = subprocess.Popen([prted, image['name']], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    p.stdin.write(f"x\ni\n0x{image['uuid']}\nr\nw\n".encode('charmap'))
    p.stdin.close()
    p.wait()
    p.poll() and (print(p.stdout.read().decode('charmap'), p.stderr.read().decode('charmap')), sys.exit(1))

for idx,partition in enumerate(image['partitions']):
    start = partition['start']
    end = partition['end']
    system(f"parted --script {image['name']} mkpart primary {start} {end}")

system(f"parted --script {image['name']} print")
system(f"sync")

if image['format'] == 'gpt':
    prted = '/usr/sbin/gdisk'
    for idx, partition in enumerate(image['partitions']):
        if len(image['partitions']) > 1:
            pn = f'{idx+1}\n'
        else:
            pn=''
        if 'uuid' in partition:
            p = subprocess.Popen([prted, image['name']], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
            print("setting uuid to", partition['uuid'])
            p.stdin.write(f"x\nc\n{pn}{partition['uuid']}\nm\nw\nY\n".encode('charmap'))
            p.stdin.close()
            p.wait()
            p.poll() and (print(p.stdout.read().decode('charmap'), p.stderr.read().decode('charmap')), sys.exit(1))

system(f"losetup -P -f {image['name']}")
p = subprocess.Popen(["/sbin/losetup", "-l", "-J", "-j", image['name']], stdout=subprocess.PIPE)
p.wait()
p.poll() and sys.exit(1)
LOOP = json.load(p.stdout)['loopdevices'][0]['name']

for idx,partition in enumerate(image['partitions']):
    system(f"mkfs.{partition['format']} {LOOP}p{idx+1} {partition.get('args', '')}")
    if flags := partition.get('flags'):
        for f,v in flags.items():
            system(f"parted --script {image['name']} set {idx+1} {f} {v}")

system(f"sync")
system(f"sleep 1")
system(f"parted --script {image['name']} print")
