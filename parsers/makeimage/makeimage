#!/usr/bin/env python3
import os
import sys
import json
import subprocess


def system(cmd):
    print(cmd)
    return os.system(cmd) and sys.exit(1)


os.chdir(os.environ['PROJECT_DIR'])
sys.path.insert(0, os.environ['CONFIG_DIR'])

from pyconfig import config

image = config['image']

# TODO: Reuse image file, if present. Use partition zap.
system(f"rm -f {image['name']}")

system(f"truncate -s {image['size']} {image['name']}")
system(f"sync")

if image['format'] == 'msdos':
    # TODO: How to make sfdisk create a new msdos label...?
    system(f"parted --script {image['name']} mklabel msdos")
    system(f"sfdisk --label dos --disk-id {image['name']} 0x{image['uuid']}")

    for idx, partition in enumerate(image['partitions']):
        start = 0
        end = 0
        if startQuery := partition.get('start'):
            start = startQuery
        if endQuery := partition.get('end'):
            end = endQuery

        system(f"parted --script {image['name']} mkpart primary {start} {end}")

        if mbrtypeid := partition.get('mbrtypeid'):
            system(f"sfdisk --label dos {image['name']} --part-type {idx + 1} {mbrtypeid}")

        if flags := partition.get('flags'):
            for f, v in flags.items():
                if "boot"==f and "on"==v:
                  system(f"sfdisk --label dos --activate {image['name']} {idx + 1}")
                else:
                  # sfdisk only understands one flag, so we have to fallback to using parted
                  # WARNING: This is almost certainly going to fuck up your image
                  # Parted *does not* handle image files correctly.
                  system(f"parted --script {image['name']} set {idx + 1} {f} {v}")

else:
    # For either of GPT disks, or hybrid GPT+MBR disks, conduct these steps.
    # We create hybrids as GPT, with a "fixup" step after this loop.
    system(f"sgdisk -Z {image['name']}")
    system(f"sgdisk --disk-guid={image['uuid']} {image['name']}")
    for idx, partition in enumerate(image['partitions']):
        start = 0
        end = 0
        if startQuery := partition.get('start'):
            start = startQuery
        if endQuery := partition.get('end'):
            end = endQuery

        system(f"sgdisk --new={idx + 1}:{start}:{end} {image['name']}")

        # GPT supports each partition having both a type code, and an identifier.
        # Identifier's supposed to be unique to the partition for scripted mounts
        # Typecode tells things like systemd's gpt auto-search whether this partition
        # is, e.g. root, boot, data, home, and so on.
        if partuuid := partition.get('partuuid'):
            system(f"sgdisk --partition-guid={idx + 1}:{partuuid} {image['name']}")

        if typeuuid := partition.get('typeuuid'):
            system(f"sgdisk --typecode={idx + 1}:{typeuuid} {image['name']}")

        if partlabel := partition.get('partlabel'):
            system(f"sgdisk --change-name={idx + 1}:'{partlabel}' {image['name']}")

        if flags := partition.get('flags'):
            # Raspberry pi refuses to boot from a /boot partition that doesn't
            # have the LBA flag set.
            for f, v in flags.items():
                if "system" == f:
                    bit = 0
                elif "boot" == f:
                    bit = 2
                elif "grow-file-system" == f:
                    bit = 59
                else:
                    continue

                if "on" == v:
                    action = "set"
                elif "off" == v:
                    action = "clear"
                else:
                    continue

                system(f"sgdisk --attributes={idx + 1}:{action}:{bit} {image['name']}")
                system(f"sgdisk --info={idx + 1} {image['name']}")

# Hybrid also implies gpt, handled above.
if image['format'] == 'hybrid':
    system(f"sgdisk --hybrid=1:EE {image['name']}")

    for idx, partition in enumerate(image['partitions']):
        if typeuuid := partition.get('mbrtypeid'):
            system(f"sfdisk --label dos {image['name']} --part-type {idx + 1} {mbrtypeid}")

        if flags := partition.get('flags'):
            # Raspberry pi refuses to boot from a /boot partition that doesn't
            # have the LBA flag set.
            for f, v in flags.items():
                if "boot"==f and "on"==v:
                  system(f"sfdisk --label dos --activate {image['name']} {idx + 1}")
                else:
                  system(f"parted --script {image['name']} set {idx + 1} {f} {v}")

# Use losetup to treat the image file as a block device
system(f"losetup --find {image['name']}")
p = subprocess.Popen(["/sbin/losetup", "-l", "-J", "-j", image['name']], stdout=subprocess.PIPE)
p.wait()
p.poll() and sys.exit(1)

# Save the path of the newly setup block device for use in scripts.
LOOP = json.load(p.stdout)['loopdevices'][0]['name']

system(f"sync")
# Ensure the newly created partitions are visable for the filesystem creation commands below.
system(f"partprobe {LOOP}")

# Note that we can't do the partitioning / filesystem creation directly on an image file
# mkfs.* doesn't work on image files, only loop devices. So we do everything with the loop device.
for idx, partition in enumerate(image['partitions']):
    if partition['filesystem'] == 'luks':
        try:
            system(f"echo '{partition['luks_pass']}' | cryptsetup -y --use-random luksFormat {LOOP}p{idx + 1} -")
        except Exception as e:
            raise exit(1)
    elif fslabel := partition.get('fslabel'):
        if partition['filesystem'] == 'vfat':
            system(f"mkfs.{partition['filesystem']} -n {fslabel} {LOOP}p{idx + 1} {partition.get('args', '')}")
        elif partition['filesystem'] == 'btrfs':
            system(f"mkfs.{partition['filesystem']} -L {fslabel} {LOOP}p{idx + 1} {partition.get('args', '')}")
        else:
            raise exit(1)
    else:
        system(f"mkfs.{partition['filesystem']} {LOOP}p{idx + 1} {partition.get('args', '')}")

system(f"sync")
system(f"losetup --detach {LOOP}")

# Print out the partition table that was created, so we can inspect the results.
# Conduct this operation on the file itself to make sure nothing got lost.
if "msdos" == image['format']:
    system(f"sfdisk --label dos --list {image['name']}")
else:
    system(f"sgdisk -p {image['name']}")

if "hybrid" == image['format']:
    system(f"fdisk --type=mbr --list {image['name']}")
