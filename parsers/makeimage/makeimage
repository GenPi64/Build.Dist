#!/usr/bin/python3.9
import os
import sys
import json
import subprocess

def system(cmd):
    print(cmd)
    return os.system(cmd) and sys.exit(1)

os.chdir(os.environ['PROJECT_DIR'])
sys.path.insert(0, os.environ['CONFIG_DIR'])

import config
config = getattr(config, os.environ['PROJECT'])

image = config['image']

#TODO: Reuse image file, if present. Use partition zap.
system(f"rm -f {image['name']}")

system(f"truncate -s {image['size']} {image['name']}")
system(f"sync")

# Use losetup to treat the image file as a block device
system(f"losetup --find {image['name']}")
p = subprocess.Popen(["/sbin/losetup", "-l", "-J", "-j", image['name']], stdout=subprocess.PIPE)
p.wait()
p.poll() and sys.exit(1)

# Save the path of the newly setup block device for use in scripts.
LOOP = json.load(p.stdout)['loopdevices'][0]['name']

if image['format'] == 'msdos':
    system(f"parted --script {LOOP} mklabel msdos")
    p = subprocess.Popen(["/sbin/fdisk", LOOP], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    p.stdin.write(f"x\ni\n0x{image['uuid']}\nr\nw\n".encode('charmap'))
    p.stdin.close()
    p.wait()
    p.poll() and (print(p.stdout.read().decode('charmap'), p.stderr.read().decode('charmap')), sys.exit(1))

    for idx,partition in enumerate(image['partitions']):
        start = 0
        end   = 0
        if startQuery := partition.get('start'):
            start = startQuery
        if endQuery := partition.get('end'):
            end = endQuery

        system(f"parted --script {LOOP} mkpart primary {start} {end}")

        if flags := partition.get('flags'):
            for f,v in flags.items():
                system(f"parted --script {LOOP} set {idx+1} {f} {v}")

else:
    # For either of GPT disks, or hybrid GPT+MBR disks, conduct these steps.
    # We create hybrids as GPT, with a "fixup" step after this loop.
    system(f"sgdisk -Z {LOOP}")
    system(f"sgdisk --disk-guid={image['uuid']} {LOOP}")
    for idx,partition in enumerate(image['partitions']):
        start = 0
        end   = 0
        if startQuery := partition.get('start'):
            start = startQuery
        if endQuery := partition.get('end'):
            end = endQuery

        system(f"sgdisk --new={idx+1}:{start}:{end} {LOOP}")

        # GPT supports each partition having both a type code, and an identifier.
        # Identifier's supposed to be unique to the partition for scripted mounts
        # Typecode tells things like systemd's gpt auto-search whether this partition
        # is, e.g. root, boot, data, home, and so on.
        if partuuid := partition.get('partuuid'):
            system(f"sgdisk --partition-guid={idx+1}:{partuuid} {LOOP}")

        if typeuuid := partition.get('typeuuid'):
            system(f"sgdisk --typecode={idx+1}:{typeuuid} {LOOP}")

        if name := partition.get('name'):
            system(f"sgdisk --change-name={idx+1}:{name} {LOOP}")

        # Raspberry pi refuses to boot from a /boot partition that doesn't
        # have the LBA flag set.
        for f,v in flags.items():
            if "on" == v:
                action = "set"
            elif "off" == v:
                action = "clear"
            else:
                continue

            if "system" == f:
                bit = 0
            elif "boot" == f:
                bit = 2
            else:
                continue

            system(f"sgdisk --attribute={idx}:{action}:{bit} {LOOP}")


if image['format'] == 'hybrid':
    system(f"sgdisk --hybrid=1:EE {LOOP}")
    p = subprocess.Popen(["/sbin/fdisk", '--type=mbr', LOOP], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    p.stdin.write(f"a\n1\nt\nc\nw\n".encode('charmap'))
    p.stdin.close()
    p.wait()
    p.poll() and (print(p.stdout.read().decode('charmap'), p.stderr.read().decode('charmap')), sys.exit(1))


system(f"sync")
# Ensure the newly created partitions are visable for the filesystem creation commands below.
system(f"partprobe {LOOP}")


# Note that we can't do the partitioning / filesystem creation directly on an image file
# mkfs.* doesn't work on image files, only loop devices. So we do everything with the loop device.
for idx,partition in enumerate(image['partitions']):
    system(f"mkfs.{partition['format']} {LOOP}p{idx+1} {partition.get('args', '')}")


system(f"sync")
system(f"losetup --detach {LOOP}")

# Print out the partition table that was created, so we can inspect the results.
# Conduct this operation on the file itself to make sure nothing got lost.
if "msdos" == image['format']:
    system(f"fdisk --type=mbr --list {image['name']}")
else:
    system(f"sgdisk -p {image['name']}")

if "hybrid" == image['format']:
    system(f"fdisk --type=mbr --list {image['name']}")
