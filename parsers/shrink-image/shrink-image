#!/usr/bin/env python3
import os
import sys
import time
import subprocess

sys.path.append(os.environ['CONFIG_DIR'])

from pyconfig import config

image = config['image']


os.chdir(os.environ['PROJECT_DIR'])

def check(p):
    p.wait()
    if p.poll():
        raise RuntimeError(f"{p} exited non-zero: {p.poll()}")

p = subprocess.Popen(['/usr/bin/env', 'btrfs', 'device', 'usage', '-b', 'image'], stdout=subprocess.PIPE)
check(p)

p.stdout.readline()
filesystemsize = int(p.stdout.readline().decode('utf-8').split(':',1)[1])
for i in range(4):
    p.stdout.readline()
unused = int(p.stdout.readline().decode('utf-8').split(':',1)[1])
print(30, unused)


p = subprocess.Popen(['/usr/bin/env', 'btrfs', 'filesystem', 'resize', f'-{unused // 1024 - 1024*1024}K', 'image'])
check(p)

p = subprocess.Popen(['/usr/bin/env', 'btrfs', 'device', 'usage', '-b', 'image'], stdout=subprocess.PIPE)
check(p)

p.stdout.readline()
filesystemsize = int(p.stdout.readline().decode('utf-8').split(':',1)[1])
slack = int(p.stdout.readline().decode('utf-8').split(':',1)[1])


with open('loopdevice.txt') as f:
    loopdevice = f.read().strip()


p = subprocess.Popen(['/usr/bin/env', 'lsblk', '-b', loopdevice], stdout=subprocess.PIPE)
check(p)
p.stdout.readline()

disksize = int(p.stdout.readline().decode('utf-8').split()[3])

partitions = 1
earlypartsize = 0
for line in p.stdout.readlines()[:-1]:
    partitions += 1
    earlypartsize += int(line.decode('utf-8').split()[3])

p = subprocess.Popen(['/usr/sbin/parted', '---pretend-input-tty', image['name'], "resizepart", f'{partitions}', f'{(earlypartsize + filesystemsize - slack+1024*1024) // 1024 + 1}KiB\n'], stdin=subprocess.PIPE)

p.stdin.write(b'yes\n')
p.stdin.flush()
p.stdin.close()
check(p)
print(earlypartsize, filesystemsize, slack, sep='\n')
print("Resizing to: "+f'{(earlypartsize + filesystemsize - slack + 1024 * 1024) // 1024 + 1024*32}KiB')

p = subprocess.Popen(['/usr/bin/env', 'truncate', '-s', f'{(earlypartsize + filesystemsize - slack + 1024 * 1024) // 1024 + 1024*32}KiB', image['name']])
check(p)

p = subprocess.Popen(['/usr/bin/env', 'sgdisk', '-e', image['name']])
check(p)
